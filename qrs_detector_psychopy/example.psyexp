<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="1.84.0rc5">
  <Settings>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="Experiment info" updates="None" val="{u'session': u'001', u'participant': u''}" valType="code"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Show info dlg" updates="None" val="False" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="expName" updates="None" val="example" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="use prefs" valType="str"/>
    <Param name="Use version" updates="None" val="latest" valType="str"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <StaticComponent name="ISI">
        <Param name="code" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="ISI" valType="code"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
      </StaticComponent>
      <ImageComponent name="image">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="image" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="8" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="constant" val="resources/bird.jpg" valType="str"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
      </ImageComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="import subprocess&amp;#10;import glob&amp;#10;&amp;#10;# Start QRSDetector as subprocess.&amp;#10;p = subprocess.Popen([&quot;python&quot;, &quot;QRSDetector.py&quot;, &quot;/dev/cu.usbmodem1411&quot;], shell=False)&amp;#10;&amp;#10;# Initialize audio feedback setup.&amp;#10;# sound.Sound()&amp;#10;#audio = psychopy.sound.SoundPyo(value='C', secs=0.2, volume=5.0)&amp;#10;audio = sound.Sound(value='500', secs=0.2)&amp;#10; &amp;#10;# Initialize QRSDetector log file.&amp;#10;qrs_log_file = max(glob.iglob('data/*.csv'), key=os.path.getctime)&amp;#10;print &quot;QRSLog:&quot;, qrs_log_file&amp;#10;fin = open(qrs_log_file, &quot;r&quot;)&amp;#10;" valType="extendedCode"/>
        <Param name="name" updates="None" val="code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="peak_detected = os.path.exists(&quot;flag.txt&quot;)&amp;#10;if peak_detected:&amp;#10;    os.remove(&quot;flag.txt&quot;)&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="p.kill()&amp;#10;fin.close()" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="# Log last qrs measurement in every frame.&amp;#10;lines = fin.readlines()&amp;#10;fin.seek(0)&amp;#10;split_last_line = lines[-1].strip().split(&quot; &quot;)&amp;#10;if len(split_last_line) == 4:&amp;#10;    string = &quot;LOG %s %s %s %s&quot; % (split_last_line[0], split_last_line[1], split_last_line[2], split_last_line[3])  &amp;#10;    logging.log(level=logging.DATA, msg=string)&amp;#10;else:&amp;#10;    split_lastbutone_line = lines[-2].strip().split(&quot; &quot;)&amp;#10;    string = &quot;LOG %s %s %s %s&quot; % (split_lastbutone_line[0], split_lastbutone_line[1], split_lastbutone_line[2], split_lastbutone_line[3])  &amp;#10;    logging.log(level=logging.DATA, msg=string)&amp;#10;&amp;#10;# Check if QRS peak was detected and trigger events if yes.&amp;#10;peak_detected = os.path.exists(&quot;flag.txt&quot;)&amp;#10;&amp;#10;if peak_detected:&amp;#10;    logging.log(level=logging.DATA, msg=&quot;test&quot;)&amp;#10;    # Log detection frame.&amp;#10;    with open(&quot;flag.txt&quot;) as flag:&amp;#10;        line = flag.readline()&amp;#10;        logging.log(level=logging.DATA, msg=&quot;QRS &quot; + line)&amp;#10;    &amp;#10;    # Play audio.&amp;#10;    # audio.play()&amp;#10;    audio.play()&amp;#10;    &amp;#10;    # Start listening for keys.&amp;#10;    psychopy.event.getKeys(keyList=[&quot;z&quot;], timeStamped=True)&amp;#10;    &amp;#10;    # Do whatever else.&amp;#10;    print &quot;Peak detected!&quot;&amp;#10;    &amp;#10;    # Do not remove this.&amp;#10;    os.remove(&quot;flag.txt&quot;)&amp;#10;" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
